<question>
コンピュータは2 進数で計算を行うため，2n の和で表現できる数値の表現は得意である．
例えば，0.75 は2􀀀1 + 2􀀀2 なので，コンピュータは誤差無く数値を扱える．
一方で，0.1 のような数値は， 2n の和で表現できないため，どうしても誤差が発生する．
実際にどれくらいの誤差が出るか以下に示すプログラムを作成し試せ．
double 型の変数num1 とnum2 に値をscanf() で読み込むプログラムを作れ．
scanf() でdouble 型の値を読むには，書式%lf を用いることを忘れないように．
　
・ 変数num1 と変数num2 へ値をscanf() で設定せよ．
・ num2 に0.1 を足す文を10 回書け．1 行で書かないこと．
・ num1 とnum2 の差がどれだけあるか表示せよ．
ただし，%f そのままではその差が表示されないので，小数点以下を23 桁程度表示できるように指定すること．
プログラムを起動し，以下の２つの場合での結果を調べよ．
1. 変数num1 に1.0 を，num2 へ0.0 を設定せよ．
2. 変数num1 に2.0 を，num2 へ1.0 を設定せよ．
どのような誤差が表示されるか．２つの違いはなぜ起こるか考えよ．
</question>

<block>
block$#include <\空欄>$標準入出力に関する関数をインポートするため，適切なライブラリ名を指定せよ!!
submodule$int main(void)$!!
block$printf("num1: ");$!!
block$scanf("%lf", &num1);$!!
block$printf("num2: ");$!!
block$scanf("%lf", &num2);$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$num2 = num2 + 0.1;$!!
block$printf("%.23f\n",num1);$!!
block$printf("%.23f\n",num2);$!!
block$printf("%.23f\n",num1 - num2);$!!
block$return 0;$!!
</block>

<answer>
#include <stdio.h>

int main(void)
{
  double num1, num2; 

  printf("num1: ");
  scanf("%lf", &num1);		/* num1に1.0を入力 */
  printf("num2: ");
  scanf("%lf", &num2);		/* num2に0.0を入力 */
   
  num2 = num2 + 0.1;		/* num2に0.1を10回足す*/
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
  num2 = num2 + 0.1;
	
  printf("%.23f\n",num1); /* num1を小数点以下23桁まで印字 */
  printf("%.23f\n",num2); /* num2を小数点以下23桁まで印字 */
  printf("%.23f\n",num1 - num2); /* num2とnum1の誤差を小数点以下23桁まで印字 */
			
  return 0;
}
</answer>
