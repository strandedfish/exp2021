<question>
<p>
  PAD（Problem Analysys Diagram）は，日本の日立製作所で発明された，プログラム図式表現方法です．
  フローチャートが抱える問題を解決しており，次に示すような特徴があります．
</p>
<ul>
  <li>プログラムの構造が一望できる</li>
  <li>構造化プログラミングの技法に合致している</li>
  <li>プログラムの構造と検査を統計的にできる</li>
</ul>
<p>
  構造化プログラミングとは，ダイクストラらによって提唱され，現在では当たり前のように普及しているプログラミングの考え方です．
  プログラムを，整理された構造の組み合わせによって構成します．
  一般的には，順接，反復，分岐の３つの制御構造によって処理の流れを表します．
</p>
<p>
  PADではこの考え方に則し，プログラム構造を要素の組み合わせで表現します．
  実際にPADで表現されたプログラム構造を見てみましょう．
</p>
<img src="../pad_example.png" alt="PAD図の画像" title="PAD図">
<legend>図１：PAD図の例と記法（仮）</legend>
<p>
  このツールの，左側にあるブロックが，コード断片です．
  コード断片を実際に組み合わせるには，この文章の上部タブからPADを選択して作図画面に切り替えてください．
  左側にあるブロックを，ドラッグアンドドロップで組み合わせることができます．<br>
  実際にやってみましょう．
</p>

<p>
  あるブロックの説明がほしいときは，そのブロックの上にマウスホバーしてみましょう．
  すべてのブロックを使うわけではありません．
</p>
<h4>
  処理の順番は，基本的に下向きです．
  右に遷移するのは，左の要素を詳細化する場合です．
</h4>

</question>

<block>
loop$1$!!
loop$1-1$!!
loop$1-\空欄$適切な空欄を入れてください!!
loop$1-1-1$!!
loop$1-1-2$!!
loop$2$!!
loop$3$!!
loop$3-1$!!
loop$3-1-1$!!
submodule$4$!!
loop$4-\空欄$!!
loop$4-\空欄-\空欄$!!
branch$もし～なら$分岐によって処理をわけよ$a=10|a>10|a<10!!
</block>

<answer>
1
____1-1
________1-1-1
________1-1-2
____1-2
2
3
____3-1
________3-1-1
4
____4-1
________4-1-1
</answer>
